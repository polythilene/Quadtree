///////////////////////////////////////////////////////////
//  QuadTree.as
//  Macromedia ActionScript Implementation of the Class CQuadTree
//  Generated by Enterprise Architect
//  Created on:      10-Nov-2009 6:29:19 PM
//  Original author: Kurniawan Fitriadi
///////////////////////////////////////////////////////////

package com.quadtree
{
	import flash.display.DisplayObjectContainer;
	import flash.geom.Point;

	import com.shade.ShadeCore;
	import com.quadtree.CQuadTreeNode;
	import com.quadtree.IGameObject;
	

	/**
	 * @author Kurniawan Fitriadi
	 * @version 1.0
	 * @created 10-Nov-2009 6:29:19 PM
	 */
	public class QuadTree
	{
		static private var m_instance:QuadTree;
		
	    private var m_rootNode: CQuadTreeNode;
		private var m_posX: int;
		private var m_posY: int;
		private var m_worldSize: int;

		/**
		 * build a quadtree node using predefined input size.  quadSize - the world size
		 * minSize - minimum size of quads, splitting will stop, if quad is lower than
		 * this value.
		 * 
		 * @param position
		 * @param quadSize
		 * @param minSize
		 */
		 
		public function QuadTree(lock:SingletonLock)
		{
		}
		
		public function initialize(pos_x:int, pos_y:int, size:int, minSize:int, conserveSubQuadrant:Boolean=true, prebuiltCount:int=100):void
		{
			// set offset and position
			m_posX = pos_x;
			m_posY = pos_y;
			m_worldSize = size;
			
			// create pool
			ShadeCore.getInstance().poolManager.registerClass(CQuadTreeNode, prebuiltCount);
			
			// create root node
			m_rootNode = new CQuadTreeNode();
			m_rootNode.initialize(null, pos_x, pos_y, size, minSize, conserveSubQuadrant);
		}
		
		public function get offset_x(): int 
		{
			return m_posX;
		}
		
		public function get offset_y(): int 
		{
			return m_posY;
		}
		
		public function get worldSize(): int 
		{
			return m_worldSize;
		}
		
		public function get debug(): Boolean
		{
			return CQuadTreeNode.debug;
		}

		/**
		 * 
		 * @param value
		 */
		public function set debug(value:Boolean): void
		{
			CQuadTreeNode.debug = value;
		}

		/**
		 * 
		 * @param item
		 */
		public function addItem( item:CQuadTreeNodeContainer ): CQuadTreeNode
		{
			var quadNode:CQuadTreeNode = m_rootNode.insert(item);
			item.onAddedToTree();
			
			return quadNode;
		}
		
		public function removeItem( item:CQuadTreeNodeContainer ): void
		{
			item.quadTreeNode.removeItem( item );
			item.onRemovedFromTree();
		}
		
		public function drawDebugQuad(display:DisplayObjectContainer): void
		{
			m_rootNode.drawDebugQuad(display);
		}
		
		static public function getInstance(): QuadTree
	    {
			if( m_instance == null )
			{
            	m_instance = new QuadTree( new SingletonLock() );
            }
			return m_instance;
	    }


	}//end CQuadTree
}


class SingletonLock{}