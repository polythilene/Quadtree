///////////////////////////////////////////////////////////
//  CQuadTreeNodeContainer.as
//  Macromedia ActionScript Implementation of the Class CQuadTreeNodeContainer
//  Generated by Enterprise Architect
//  Created on:      17-Nov-2009 4:00:23 PM
//  Original author: Kurniawan Fitriadi
///////////////////////////////////////////////////////////

package com.quadtree
{
	import com.quadtree.IGameObject;
	import com.quadtree.CQuadTreeNode;
	
	import com.shade.geom.CPoint;
	import com.shade.geom.CRectangle;
	

	/**
	 * @author Kurniawan Fitriadi
	 * @version 1.0
	 * @created 17-Nov-2009 4:00:24 PM
	 */
	public class CQuadTreeNodeContainer
	{
	    public var prev: CQuadTreeNodeContainer;
	    public var next: CQuadTreeNodeContainer;
	    /**
	     * Game object linked to this node.
	     * 
	     * TODO: in the future single container can hold multiple objects, for now let's
	     * make them hold single entity.
	     */
	    private var m_gameObject: IGameObject;

		private var m_position: CPoint = new CPoint();
		private var m_width:int = 0;
		private var m_height:int = 0;
		private var m_halfWidth:int = 0;
		private var m_halfHeight:int = 0;
		
	    private var m_quadTreeNode: CQuadTreeNode;
		
		private var m_bufferCollidedObjects:Array;
		private var m_bufferNearbyObjects:Array;
		
		
		public function CQuadTreeNodeContainer() 
		{
			m_bufferCollidedObjects = [];
			m_bufferNearbyObjects = [];
		}
		
	    /**
	     * Set the game object linked to this node.
	     * 
	     * TODO: to be replaced with addGameObject to hold multiple object per node.
	     * 
	     * @param item
	     */
	    public function set gameObject(item:IGameObject): void
	    {
			prev = null;
	    	next = null;
		
			m_gameObject = item;
			item._container = this;
			
			var rect:CRectangle = item._getBoundRect();
			m_width = rect.width;
			m_height = rect.height;
			m_halfWidth = m_width >> 1;
			m_halfHeight = m_height >> 1;
	    }
		
		public function get gameObject():IGameObject
	    {
			return m_gameObject;
	    }

	    /**
	     * 
	     * @param value
	     */
		public function set position(value:CPoint): void
	    {
			m_position.x = value.x;
			m_position.y = value.y;
			
			updatePosition();
	    }

		public function get position(): CPoint
	    {
			return m_position;
	    }
		
		public function get width():int
		{
			return m_width;
		}
		
		public function get height():int
		{
			return m_height;
		}

	    private function updatePosition(): void
	    {
			m_gameObject._worldPosition = m_position;
			
			if( quadTreeNode )
				quadTreeNode.updateItem(this);
	    }

	    public function getBoundRect(): CRectangle
	    {
			return m_gameObject._getBoundRect();
	    }
		
		public function get quadTreeNode(): CQuadTreeNode
	    {
			return m_quadTreeNode;
	    }

	    public function set quadTreeNode(value:CQuadTreeNode): void
	    {
			m_quadTreeNode = value;
	    }
		
		public function queryCollidedObjects(filter:int): Array
		{
			if( m_bufferCollidedObjects.length > 0 )
				m_bufferCollidedObjects.splice(0, m_bufferCollidedObjects.length);

			m_quadTreeNode.getCollidingItems(this, m_bufferCollidedObjects, filter, 0);
			
			return m_bufferCollidedObjects;
		}
		
		public function queryObjectsInRange(range:int, filter:int): Array
		{
			if( m_bufferNearbyObjects.length > 0 )
				m_bufferNearbyObjects.splice(0, m_bufferNearbyObjects.length);
				
			CQuadTreeNode.rootNode.getObjectsInRange( this, m_position.x+m_halfWidth, m_position.y+m_halfHeight, range, m_bufferNearbyObjects, filter );
						
			return m_bufferNearbyObjects;
		}
		
		
		/* EVENTS */
		
		public function onAddedToTree(): void
		{
			m_gameObject._onAddedToTree();
		}
		
		public function onRemovedFromTree(): void
		{
			m_gameObject._onRemovedFromTree();
		}
		
	}//end CQuadTreeNodeContainer
}